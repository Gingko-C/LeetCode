//在找到单词后可以直接return 中断查找；但没有找到的时候不应该return 中断查找，应继续在其他方向查找
//超过25% 效率不高 值得优化
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        vector<vector<int>> occ(board.size(),vector<int>(board[0].size(),1));
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]==word[0]) {
                    bool ans=find(board,word,occ,0,i,j);
                    if(ans==true) return true;
                }
            }
        }
        return false;
    }
    
    bool find(vector<vector<char>>& board,string word,vector<vector<int>> occ,int n,int i,int j){
        occ[i][j]=0;
        if(n+1==word.size()) return true;
        if (i - 1 >= 0 && occ[i - 1][j] != 0 && board[i - 1][j] == word[n + 1]){
			if (find(board, word, occ, n + 1, i - 1, j)) return true;
		}
		if (i + 1<board.size() && occ[i + 1][j] != 0 && board[i + 1][j] == word[n + 1]){
			if (find(board, word, occ, n + 1, i + 1, j)) return true;
		}
		if (j - 1 >= 0 && occ[i][j - 1] != 0 && board[i][j - 1] == word[n + 1]){
			if (find(board, word, occ, n + 1, i, j - 1)) return true;
		}
		if (j + 1<board[0].size() && occ[i][j + 1] != 0 && board[i][j + 1] == word[n + 1]){
			if (find(board, word, occ, n + 1, i, j + 1)) return true;
		}
        return false;
    }
};