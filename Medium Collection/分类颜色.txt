//思路：p1始终指向数字1或2的最靠前的那个（交换后向后移可能指向2）p2始终指向2最靠前的那个 当nums[i]==0则和p1交换位置（如果p1=nullptr则和p2交换，p2=nullptr那么nums[i]无需交换位置），当nums[i]==1，则与p2交换位置，交换后的1在p2位置，若p2<p1则p1=p2(如｛0，0，0，2，2，2，1，1，1｝时会有这种情况）
//超过99% 一趟算法，额外空间为3
class Solution {
public:
	void sortColors(vector<int>& nums) {
		int *p1 = nullptr, *p2 = nullptr;
		int temp;
		for (int i = 0; i<nums.size(); i++){
			if ((p1 == nullptr || *p1 != 1) && nums[i] == 1) p1 = &nums[i];
			if ((p2 == nullptr || *p2 != 2) && nums[i] == 2) p2 = &nums[i];
			if (nums[i] == 0 && (p1 != nullptr && *p1>0)) {
				temp = *p1;
				*p1 = 0;
				nums[i] = temp;
				p1++;
			}
			if (nums[i] == 0 && (p2 != nullptr && *p2>1)) {
				temp = *p2;
				*p2 = 0;
				nums[i] = temp;
				p2++;
			}
			if (nums[i] == 1 && (p2 != nullptr && *p2>1)) {
				temp = *p2;
				*p2 = 1;
				if (p1 != nullptr && p1 > p2) p1 = p2;
				nums[i] = temp;
				p2++;
			}
		}
	}
};